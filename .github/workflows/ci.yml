name: credit_bank ci pipeline

on:
  push:
    branches: [master, develop, test-ci]

jobs:
  test-microservices:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: credit_bank_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        service: [ api-gateway, calculator, deal, dossier, statement ]

    steps:
    - uses: actions/checkout@v4
      with:
         fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
      
    - name: Wait until the services are ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          sleep 1
        done
    - name: Run tests with coverage for ${{ matrix.service }}
      run: |
        cd ${{matrix.service}}
        mvn clean test jacoco:report

    - name: Upload coverage to CodeCov for ${{ matrix.service }}
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.service }}/target/site/jacoco/jacoco.xml
        flags: ${{ matrix.service }}
        name: codecov-${{ matrix.service }}
        fail_ci_if_error: false

    - name: SonarScan for ${{ matrix.service }}
      run: |
        cd ${{ matrix.service }}
        mvn sonar:sonar \
          -Dsonar.projectKey=andreynikonov23_CreditBank \
          -Dsonar.organization=CreditBank \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.java.coveragePlugin=jacoco \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Upload test results for ${{ matrix.service }}
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ${{ matrix.service }}/target/surefire-reports/

    - name: Upload coverage report for ${{ matrix.service }}
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ${{ matrix.service }}/target/site/jacoco/

    - name: Upload coverage report for ${{ matrix.service }}
      uses: actions/upload-artifact@v4
      with:
        name: sonar-report
        path: ${{ matrix.service }}/target/sonar/
  

  build-microservices:
    runs-on: ubuntu-latest
    needs: test
    if: success()
    strategy:
      matrix:
        service: [ api-gateway, calculator, deal, dossier, statement ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn package -DskipTests

      - name: Upload JAR artifact for ${{ matrix.service }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ matrix.service }}/target/*.jar

  build-docker-compose:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    strategy:
      matrix:
        service: [ api-gateway, calculator, deal, dossier, statement ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Build
        uses: actions/setup-buildx-action@v2

      - name: Build docker images
        run: docker compose -f docker/docker-compose.yml build --no-cache

      - name: Logs docker images
        run: docker images

      - name: Save images to artifact
        run: |
          mkdir docker-images
          for service in api-gateway, calculator, deal, dossier, statement; do
            docker save docker-$service -o docker-images/$service.tar
          done

      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images/*.tar

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'CI failed!'
            })

      


        

